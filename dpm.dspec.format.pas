// This unit is autogenerated. Do not edit it manually.
// Source: JSON pasted from clipboard
// Date: 25/12/2023 9:54:54 PM

unit dpm.dspec.format;

interface

uses
  System.Classes, REST.Json.Types;

type
  [JsonSerialize(jmAllPubProps)]
  TSource = class(TPersistent)
  private
    Fsrc: string;
    Fflatten: Boolean;
    Fdest: string;
    Fexclude: TArray<string>;
  public
    destructor Destroy; override;
    property src: string read Fsrc write Fsrc;
    property flatten: Boolean read Fflatten write Fflatten;
    property dest: string read Fdest write Fdest;
    property exclude: TArray<string> read Fexclude write Fexclude;
  end;

  [JsonSerialize(jmAllPubProps)]
  TDesign = class(TPersistent)
  private
    Fsrc: string;
    Fdest: string;
    Finstall: Boolean;
  public
    destructor Destroy; override;
    property src: string read Fsrc write Fsrc;
    property dest: string read Fdest write Fdest;
    property install: Boolean read Finstall write Finstall;
  end;


  [JsonSerialize(jmAllPubProps)]
  TSearchPath = class(TPersistent)
  private
    Fpath: string;
  public
    property path: string read Fpath write Fpath;
  end;

  [JsonSerialize(jmAllPubProps)]
  TBuild = class(TPersistent)
  private
    Fid: string;
    Fproject: string;
  public
    property id: string read Fid write Fid;
    property project: string read Fproject write Fproject;
  end;

  [JsonSerialize(jmAllPubProps)]
  TDependency = class(TPersistent)
  private
    Fid: string;
    Fversion: string;
  public
    property id: string read Fid write Fid;
    property version: string read Fversion write Fversion;
  end;

  [JsonSerialize(jmAllPubProps)]
  TRuntime = class(TPersistent)
  private
    Fsrc: string;
    Fdest: string;
    FcopyLocal: Boolean;
  public
    property src: string read Fsrc write Fsrc;
    property dest: string read Fdest write Fdest;
    property copyLocal: Boolean read FcopyLocal write FcopyLocal;
  end;

  [JsonSerialize(jmAllPubProps)]
  TMetadata = class(TPersistent)
  private
    Fid: string;
    Fversion: string;
    Fdescription: string;
    Fauthors: string;
    FprojectUrl: string;
    FrepositoryUrl: string;
    Flicense: string;
    Fcopyright: string;
    Ftags: string;
  public
    property id: string read Fid write Fid;
    property version: string read Fversion write Fversion;
    property description: string read Fdescription write Fdescription;
    property authors: string read Fauthors write Fauthors;
    property projectUrl: string read FprojectUrl write FprojectUrl;
    property repositoryUrl: string read FrepositoryUrl write FrepositoryUrl;
    property license: string read Flicense write Flicense;
    property copyright: string read Fcopyright write Fcopyright;
    property tags: string read Ftags write Ftags;
  end;

  [JsonSerialize(jmAllPubProps)]
  TTargetPlatform = class(TPersistent)
  private
    Fcompiler: string;
    Fplatforms: string;
    Ftemplate: string;
  public
    property compiler: string read Fcompiler write Fcompiler;
    property platforms: string read Fplatforms write Fplatforms;
    property template: string read Ftemplate write Ftemplate;
  end;

  [JsonSerialize(jmAllPubProps)]
  TTemplate = class(TPersistent)
  private
    Fname: string;
    Fsource: TArray<TSource>;
    FsearchPaths: TArray<TSearchPath>;
    Fbuild: TArray<TBuild>;
    Fruntime: TArray<TRuntime>;
    Fdesign: TArray<TDesign>;
    Fdependency: TArray<TDependency>;
  public
    destructor Destroy; override;
    property name: string read Fname write Fname;
    property source: TArray<TSource> read Fsource write Fsource;
    property searchPaths: TArray<TSearchPath> read FsearchPaths write FsearchPaths;
    property build: TArray<TBuild> read Fbuild write Fbuild;
    property runtime: TArray<TRuntime> read Fruntime write Fruntime;
    property design: TArray<TDesign> read Fdesign write Fdesign;
    property dependencies: TArray<TDependency> read Fdependency write Fdependency;
  end;

  [JsonSerialize(jmAllPubProps)]
  TDPMSpecFormat = class(TPersistent)
  private
    Fmetadata: TMetadata;
    FtargetPlatforms: TArray<TTargetPlatform>;
    Ftemplates: TArray<TTemplate>;
  public
    constructor Create;
    destructor Destroy; override;
    property metadata: TMetadata read Fmetadata;
    property targetPlatforms: TArray<TTargetPlatform> read FtargetPlatforms write FtargetPlatforms;
    property templates: TArray<TTemplate> read Ftemplates write Ftemplates;
  end;

implementation

uses
  System.SysUtils, System.Generics.Collections;

destructor TSource.Destroy;
begin
  TArray.FreeValues<string>(Fexclude);
  inherited Destroy;
end;

destructor TTemplate.Destroy;
begin
  TArray.FreeValues<TSource>(Fsource);
  TArray.FreeValues<TSearchPath>(FsearchPaths);
  TArray.FreeValues<TBuild>(Fbuild);
  TArray.FreeValues<TRuntime>(Fruntime);
  TArray.FreeValues<TDesign>(Fdesign);
  TArray.FreeValues<TDependency>(Fdependency);
  inherited Destroy;
end;

constructor TDPMSpecFormat.Create;
begin
  inherited Create;
  Fmetadata := TMetadata.Create;
end;

destructor TDPMSpecFormat.Destroy;
begin
  FreeAndNil(Fmetadata);
  TArray.FreeValues<TTargetPlatform>(FtargetPlatforms);
  TArray.FreeValues<TTemplate>(Ftemplates);
  inherited Destroy;
end;

{ TDesign }

destructor TDesign.Destroy;
begin
  inherited;
end;

initialization

  RegisterClass(TSource);
  RegisterClass(TSearchPath);
  RegisterClass(TBuild);
  RegisterClass(TRuntime);
  RegisterClass(TDesign);
  RegisterClass(TMetadata);
  RegisterClass(TTargetPlatform);
  RegisterClass(TTemplate);
  RegisterClass(TDPMSpecFormat);
end.
